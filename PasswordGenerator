using System;
using System.Linq;

namespace SimplePasswordGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Welcome to the Simple Password Generator!");

            // Ask the user for the desired password length
            Console.Write("Enter the length of the password (minimum 8 characters): ");
            if (!int.TryParse(Console.ReadLine(), out int passwordLength) || passwordLength < 8)
            {
                Console.WriteLine("Invalid input. Password length must be at least 8 characters.");
                Console.ReadKey(); // Keep the console open
                return;
            }

            // Generate and display the password
            string password = GeneratePassword(passwordLength);
            Console.WriteLine($"\nYour generated password is: {password}");

            // Keep the console open until the user presses a key
            Console.WriteLine("\nPress any key to exit...");
            Console.ReadKey();
        }

        static string GeneratePassword(int length)
        {
            // Define character sets for password generation
            const string uppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const string lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
            const string numbers = "0123456789";
            const string specialCharacters = "!@#$%^&*()-_=+[]{};:,.<>?";

            // Combine all character sets
            string allCharacters = uppercaseLetters + lowercaseLetters + numbers + specialCharacters;

            // Use Random to generate the password
            Random random = new Random();
            char[] password = new char[length];

            // Ensure the password contains at least one character from each set
            password[0] = uppercaseLetters[random.Next(uppercaseLetters.Length)];
            password[1] = lowercaseLetters[random.Next(lowercaseLetters.Length)];
            password[2] = numbers[random.Next(numbers.Length)];
            password[3] = specialCharacters[random.Next(specialCharacters.Length)];

            // Fill the rest of the password with random characters
            for (int i = 4; i < length; i++)
            {
                password[i] = allCharacters[random.Next(allCharacters.Length)];
            }

            // Shuffle the password to ensure randomness
            password = password.OrderBy(c => random.Next()).ToArray();

            return new string(password);
        }
    }
}
